---
title: "Digital Guard - Apresentação"
author: "data@addressforall.org"
date: today
date-format: "DD/MM/YYYY"
format:
   html:
     self-contained: true
execute:
  echo: false
  warning: false
  error: false
---

```{r}
# open packages
library(readr) #download and open csv
library(tidyverse) #data manipulation
library(lubridate) #dealing with dates

library(sf) #geospatial data support and manipulation

library(leaflet) #interactive maps
library(rbokeh) #interactive plots
library(DT) #interactive tables
library(knitr) #print regular tables

library(rnaturalearth) #downloads one shapefile - this dependency can be removed by downloading data from another directory

# download data
donor <- read_csv("https://raw.githubusercontent.com/digital-guard/preserv-BR/main/data/donor.csv")

donatedPack <- read_csv("https://raw.githubusercontent.com/digital-guard/preserv-BR/main/data/donatedPack.csv")

volume <- read_csv2("https://addressforall.org/luisv2.csv") %>%
  filter(!ftname_class %in% c("address", "cadparcel", "cadvia")) %>%
  mutate(license_family = case_when(license %in% c("CC0", "CC0,(lei municipal)", "CC0; (non-standard)") ~ "CC0",
                                    license %in% c("CC-BY") ~ "CC-BY",
                                    license %in% c("ODbL") ~ "CC-BY-SA"),
         license_type = if_else(license_is_explicit == "yes", "explicit", "implicit"))

# temporary files
iso <- c("ARG", "BOL", "BRA", "CHL", "COL", "ECU", "PER", "PRY", "URY", "VEN") #"GUF",

aoi <- ne_countries(return = 'sf') %>% filter(iso_a3 %in% iso)
```

Os endereços são parte fundamental da infraestrutura física-territorial de um país. Eles são essenciais para a provisão de serviços básicos (eletricidade, água, correio), no planejamento e implementação de políticas públicas e no desenvolvimento do setor privado.

<img align="center" src="../_assets/AML-parceiros2022.png">

O Instituto AddressForAll já atua em **`r length(iso)` países** da América Latina por meio do Projeto Digital Guard. **`r length(unique(volume$donor_id))` doadores** [contribuíram para a plataforma de dados](https://addressforall.org/teste2/).

<!--
{r}
# mapa da área de atuação
leaflet() %>%
  addTiles() %>%
  addPolygons(data = aoi,
              stroke = 0,
              fillColor = "yellow",
              opacity = 1#,
              #popup = aoi$name#,
              #highlightOptions = highlightOptions(stroke = 1,
              #                                    color = "black",
              #                                    bringToFront = FALSE)
              )

-->

# Metodologia A4A

A prospecção de potenciais doadores inicia por uma cuidadosa curadoria, formalizada em sistema de CRM. Os potenciais contatos são verificados um a um, por e-mail e telefone. Seguem-se então alguns passos para se conquistar doadores e seus pacotes de dados livres:

<img align="center" src="../_assets/A4A_method-funilDoacoes2022-06.png">

1. quando um dos contatos do CRM é confirmado e concorda em dialogar, contabilizamos como "potencial doador contatado";

2. alguns dos contatados são convencidos a doar e arquivos de dados (mesmo que ruins contabilizamos como "com dados");

3. por fim analisamos, pedimos mais dados e aceitamos, a entrega do doador vira "pacote doado" (exemplos brasileiro de [metadados de pacotes](https://github.com/digital-guard/preserv-BR)).

Apesar de cada pacote conter dados de interesse da AddressForAll, o doador é livre para entregar seus dados oficiais misturados a outros dados, e no formato desejado. A equipe técnica efetua então um **recorte** sobre os dados originais, elegendo um ou mais *layers* para esse recorte, e então reestruturando e **filtrando** os dados dos *layers*, para que fiquem todos em um só padrão. Os dados originais são preservados por **20 anos**, e os procedimentos de recorte e a filtragem são públicos e reprodutíveis.

O [dicionário de dados](https://github.com/digital-guard/preserv/blob/main/docs/pt/ftypes.md) descreve quais tipos de *layer* são adicionadas à plataforma de **dados filtrados** atualmente.

<p><i>Layers</i> contendo o endereço:
<ul style="list-style-type:none;" dir="auto">
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-geoaddress.png" align="middle" width="40" style="max-width: 100%;"> <strong>geoaddress</strong>: Geo-endereço. Representação geográfica do endereço, como ponto.</li>
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-building.png" align="middle" width="40" style="max-width: 100%; padding-top: 6pt;"> <strong>building</strong>: Polígono de edificação.</li>
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-parcel.png" align="middle" width="40" style="max-width: 100%; padding-top: 6pt;"> <strong>parcel</strong>: Polígono de lote (terreno).</li>
</ul>
</p>

<p><i>Layers</i> de apoio e complementação dos dados de endereço:
<ul style="list-style-type:none;" dir="auto">
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-via.png" align="middle" width="40" style="max-width: 100%; padding-top: 6pt;"> <strong>via</strong>: Eixo de via. Logradouro representado por linha central, com nome oficial.</li>
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-genericVia.png" align="middle" width="40" style="max-width: 100%; padding-top: 6pt;"> <strong>genericvia</strong>: Ferrovia, hidrovia ou outra "via generalizada" que ajude a delimitar quadras. </li>
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-namedZone.png" align="middle" width="40" style="max-width: 100%; padding-top: 6pt;"> <strong>block</strong>: Quadras ou divisões poligonais similares.</li>
<li><img src="https://raw.githubusercontent.com/digital-guard/preserv/main/docs/assets/layerIcon-namedZone.png" align="middle" width="40" style="max-width: 100%; padding-top: 6pt;"> <strong>nsvia</strong>: <em>NameSpace</em> para distinguir vias duplicadas, tipicamente bairro ou loteamento.</li>
</ul>
</p>

A política de licenças adotada pelo Instituto foi detalhada [neste repositório](https://github.com/digital-guard/licenses).

## Prospecção

```{r}
donor %>%
  group_by(donor_status) %>%
  tally() %>%
  arrange(desc(donor_status)) %>%
  mutate(donor_status = case_when(donor_status == 0 ~ "Donors contacted",
                                  donor_status == 1 ~ "Donors interested in collaborating",
                                  donor_status == 2 ~ "Donated pack received",
                                  donor_status == 3 ~ "Donated pack published"),
         n = cumsum(n)) %>%
  ggplot() +
  geom_col(aes(x = n, y = donor_status)) +
  geom_text(aes(x = n, y = donor_status, label = n), position=position_stack(vjust=0.5), col = "white") +
  xlab("Number of donors") +
  ylab("") +
  theme_bw()
```

## Dados preservados

**`r length(volume$pack_id)` layers** já foram preservados, recebidas de **`r length(unique(volume$legalname))` doadores**

```{r}
ggplot(data = volume %>% group_by(ftname_class) %>% count() %>% mutate(col = if_else(ftname_class %in% c("building", "geoaddress", "parcel"), TRUE, FALSE))) +
  geom_col(aes(x = n, y = ftname_class, fill = col), show.legend = FALSE) +
  #scale_x_continuous(breaks = seq(0,,2)) +
  scale_y_discrete(limits=rev) +
  scale_fill_manual(values = c("gray75", "gray25")) +
  xlab("Packages") + ylab("Layers") +
  theme_bw()
```

```{r}
volume %>%
  group_by(pack_id) %>%
  slice(1) %>%
  ungroup() %>%
  mutate(new_date = floor_date(accepted_date, unit = "month")) %>%
  group_by(new_date) %>%
  count() %>%
  ungroup() %>%
  mutate(n = cumsum(n)) %>%
  filter(new_date > "2000-01-01") %>%
  ggplot() +
  geom_area(aes(x = new_date, y = n, fill = "gray50"), show.legend = FALSE) +
  scale_fill_manual(values = c("gray50")) +
  xlab("Date") + ylab("Donated packages") +
  theme_bw()
```

## Dados filtrados

### Geoendereços

**`r volume %>% filter(ftname %in% c("geoaddress_full", "parcel_full")) %>% summarize(sum(quantidade_feicoes_bruta)) %>% sum() %>% format(scientific = FALSE, big.mark = ".")` geoendereços**, compartilhados por **`r volume %>% filter(ftname %in% c("geoaddress_full", "parcel_full")) %>% group_by(legalname) %>% tally() %>% nrow()` doadores**

**`r volume %>% filter(ftname %in% c("geoaddress_full", "parcel_full") & license_family == "CC0") %>% summarize(sum(quantidade_feicoes_bruta)) %>% sum() %>% format(scientific = FALSE, big.mark = ".")` geoendereços com licença da família CC0**, compartilhados por **`r volume %>% filter(ftname %in% c("geoaddress_full", "parcel_full") & license_family == "CC0") %>% group_by(legalname) %>% tally() %>% nrow()` doadores**

**`r volume %>% filter(ftname %in% c("geoaddress_full", "parcel_full") & license_family == "CC0" & license_is_explicit == "yes") %>% summarize(sum(quantidade_feicoes_bruta)) %>% sum() %>% format(scientific = FALSE, big.mark = ".")` geoendereços com licença da família CC0 explícita**, compartilhados por **`r volume %>% filter(ftname %in% c("geoaddress_full", "parcel_full") & license_family == "CC0" & license_is_explicit == "yes") %>% group_by(legalname) %>% tally() %>% nrow()` doadores**

```{r}
volume %>%
  mutate(license2 = paste0(license_family, " (", license_type, ")")) %>%
  filter(ftname %in% c("geoaddress_full", "parcel_full")) %>%
  group_by(legalname) %>%
  slice(1) %>%
  ungroup() %>%
  group_by(license2) %>%
  summarise(Donors = n(),
            Addresses = format(sum(quantidade_feicoes_bruta, na.rm = TRUE), big.mark = ".")) %>%
  arrange(desc(license2)) %>%
  rename("License family" = license2) %>%
  kable()
```

## Dados consolidados

Ainda não está em operação.

## Layers doadas para consulta - apenas dados completos/full (ver dicionário de dados)

```{r}
#| column: page

volume %>%
  mutate(license_family = as_factor(license_family),
         license_type = as_factor(license_type),
         ftname_class = as_factor(ftname_class)) %>%
  filter(grepl(pattern = "full", x = ftname)) %>%
  select(scope, legalname, ftname_class, quantidade_feicoes_bruta, license_family, license_type) %>%
  mutate(quantidade_feicoes_bruta = format(quantidade_feicoes_bruta, big.mark = ".")) %>%
  setNames(c("Jurisdiction", "Donor", "Layer", "# of features", "License family", "License type")) %>%
  arrange(`Jurisdiction`) %>%
  datatable(class = 'compact hover nowrap order-column row-border',
          rownames = FALSE,
          filter = "top")
```
